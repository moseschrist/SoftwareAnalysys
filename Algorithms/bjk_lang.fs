// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "bjk_lang.fsy"


# 9 "bjk_lang.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | PROG
  | LBRACE
  | RBRACE
  | SKIP
  | ASSIGN
  | VAR of (int)
  | OR
  | CHOOSE
  | ELSE
  | IF
  | LOOP
  | INT of (int)
  | PLUS
  | TIMES
  | RPAREN
  | LPAREN
  | SEMI
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_PROG
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_SKIP
    | TOKEN_ASSIGN
    | TOKEN_VAR
    | TOKEN_OR
    | TOKEN_CHOOSE
    | TOKEN_ELSE
    | TOKEN_IF
    | TOKEN_LOOP
    | TOKEN_INT
    | TOKEN_PLUS
    | TOKEN_TIMES
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_SEMI
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startPROG
    | NONTERM_PROG
    | NONTERM_COMMAND
    | NONTERM_EXP

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | PROG  -> 1 
  | LBRACE  -> 2 
  | RBRACE  -> 3 
  | SKIP  -> 4 
  | ASSIGN  -> 5 
  | VAR _ -> 6 
  | OR  -> 7 
  | CHOOSE  -> 8 
  | ELSE  -> 9 
  | IF  -> 10 
  | LOOP  -> 11 
  | INT _ -> 12 
  | PLUS  -> 13 
  | TIMES  -> 14 
  | RPAREN  -> 15 
  | LPAREN  -> 16 
  | SEMI  -> 17 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_PROG 
  | 2 -> TOKEN_LBRACE 
  | 3 -> TOKEN_RBRACE 
  | 4 -> TOKEN_SKIP 
  | 5 -> TOKEN_ASSIGN 
  | 6 -> TOKEN_VAR 
  | 7 -> TOKEN_OR 
  | 8 -> TOKEN_CHOOSE 
  | 9 -> TOKEN_ELSE 
  | 10 -> TOKEN_IF 
  | 11 -> TOKEN_LOOP 
  | 12 -> TOKEN_INT 
  | 13 -> TOKEN_PLUS 
  | 14 -> TOKEN_TIMES 
  | 15 -> TOKEN_RPAREN 
  | 16 -> TOKEN_LPAREN 
  | 17 -> TOKEN_SEMI 
  | 20 -> TOKEN_end_of_input
  | 18 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startPROG 
    | 1 -> NONTERM_PROG 
    | 2 -> NONTERM_PROG 
    | 3 -> NONTERM_COMMAND 
    | 4 -> NONTERM_COMMAND 
    | 5 -> NONTERM_COMMAND 
    | 6 -> NONTERM_COMMAND 
    | 7 -> NONTERM_COMMAND 
    | 8 -> NONTERM_COMMAND 
    | 9 -> NONTERM_EXP 
    | 10 -> NONTERM_EXP 
    | 11 -> NONTERM_EXP 
    | 12 -> NONTERM_EXP 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 20 
let _fsyacc_tagOfErrorTerminal = 18

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | PROG  -> "PROG" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | SKIP  -> "SKIP" 
  | ASSIGN  -> "ASSIGN" 
  | VAR _ -> "VAR" 
  | OR  -> "OR" 
  | CHOOSE  -> "CHOOSE" 
  | ELSE  -> "ELSE" 
  | IF  -> "IF" 
  | LOOP  -> "LOOP" 
  | INT _ -> "INT" 
  | PLUS  -> "PLUS" 
  | TIMES  -> "TIMES" 
  | RPAREN  -> "RPAREN" 
  | LPAREN  -> "LPAREN" 
  | SEMI  -> "SEMI" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | PROG  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | VAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OR  -> (null : System.Object) 
  | CHOOSE  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | LOOP  -> (null : System.Object) 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PLUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 7us; 65535us; 0us; 2us; 14us; 8us; 17us; 9us; 20us; 10us; 23us; 11us; 26us; 12us; 29us; 13us; 3us; 65535us; 6us; 7us; 34us; 32us; 35us; 33us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 11us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 3us; 1us; 2us; 5us; 1us; 1us; 1us; 3us; 1us; 4us; 1us; 4us; 3us; 4us; 10us; 11us; 2us; 5us; 5us; 2us; 5us; 6us; 2us; 5us; 7us; 2us; 5us; 7us; 2us; 5us; 8us; 2us; 5us; 8us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 9us; 3us; 10us; 10us; 11us; 3us; 10us; 11us; 11us; 1us; 10us; 1us; 11us; 1us; 12us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 8us; 10us; 12us; 14us; 16us; 20us; 23us; 26us; 29us; 32us; 35us; 38us; 40us; 42us; 44us; 46us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; 62us; 64us; 66us; 68us; 70us; 72us; 74us; 78us; 82us; 84us; 86us; |]
let _fsyacc_action_rows = 37
let _fsyacc_actionTableElements = [|5us; 32768us; 4us; 4us; 6us; 5us; 8us; 25us; 10us; 19us; 11us; 15us; 0us; 49152us; 2us; 16386us; 0us; 3us; 17us; 14us; 0us; 16385us; 0us; 16387us; 1us; 32768us; 5us; 6us; 2us; 32768us; 6us; 31us; 12us; 36us; 2us; 16388us; 13us; 34us; 14us; 35us; 0us; 16389us; 2us; 32768us; 3us; 18us; 17us; 14us; 2us; 32768us; 3us; 21us; 17us; 14us; 2us; 32768us; 3us; 24us; 17us; 14us; 2us; 32768us; 3us; 27us; 17us; 14us; 2us; 32768us; 3us; 30us; 17us; 14us; 5us; 32768us; 4us; 4us; 6us; 5us; 8us; 25us; 10us; 19us; 11us; 15us; 1us; 32768us; 6us; 16us; 1us; 32768us; 2us; 17us; 5us; 32768us; 4us; 4us; 6us; 5us; 8us; 25us; 10us; 19us; 11us; 15us; 0us; 16390us; 1us; 32768us; 2us; 20us; 5us; 32768us; 4us; 4us; 6us; 5us; 8us; 25us; 10us; 19us; 11us; 15us; 1us; 32768us; 9us; 22us; 1us; 32768us; 2us; 23us; 5us; 32768us; 4us; 4us; 6us; 5us; 8us; 25us; 10us; 19us; 11us; 15us; 0us; 16391us; 1us; 32768us; 2us; 26us; 5us; 32768us; 4us; 4us; 6us; 5us; 8us; 25us; 10us; 19us; 11us; 15us; 1us; 32768us; 7us; 28us; 1us; 32768us; 2us; 29us; 5us; 32768us; 4us; 4us; 6us; 5us; 8us; 25us; 10us; 19us; 11us; 15us; 0us; 16392us; 0us; 16393us; 1us; 16394us; 14us; 35us; 0us; 16395us; 2us; 32768us; 6us; 31us; 12us; 36us; 2us; 32768us; 6us; 31us; 12us; 36us; 0us; 16396us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 6us; 7us; 10us; 11us; 12us; 14us; 17us; 20us; 21us; 24us; 27us; 30us; 33us; 36us; 42us; 44us; 46us; 52us; 53us; 55us; 61us; 63us; 65us; 71us; 72us; 74us; 80us; 82us; 84us; 90us; 91us; 92us; 94us; 95us; 98us; 101us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 3us; 3us; 5us; 8us; 8us; 1us; 3us; 3us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16390us; 65535us; 65535us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 16392us; 16393us; 65535us; 65535us; 65535us; 65535us; 16396us; |]
let _fsyacc_reductions ()  =    [| 
# 181 "bjk_lang.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Core.Cmd)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startPROG));
# 190 "bjk_lang.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'COMMAND)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "bjk_lang.fsy"
                                                                             _1
                   )
# 29 "bjk_lang.fsy"
                 : Core.Cmd));
# 201 "bjk_lang.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'COMMAND)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "bjk_lang.fsy"
                                               _1
                   )
# 30 "bjk_lang.fsy"
                 : Core.Cmd));
# 212 "bjk_lang.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "bjk_lang.fsy"
                                                                       Core.Skip
                   )
# 31 "bjk_lang.fsy"
                 : 'COMMAND));
# 222 "bjk_lang.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'EXP)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "bjk_lang.fsy"
                                                                                Core.Asgn(_1,_3)
                   )
# 32 "bjk_lang.fsy"
                 : 'COMMAND));
# 234 "bjk_lang.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'COMMAND)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'COMMAND)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "bjk_lang.fsy"
                                                                                Core.Seq(_1,_3)
                   )
# 33 "bjk_lang.fsy"
                 : 'COMMAND));
# 246 "bjk_lang.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'COMMAND)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "bjk_lang.fsy"
                                                                                Core.Loop(_2, _4)
                   )
# 34 "bjk_lang.fsy"
                 : 'COMMAND));
# 258 "bjk_lang.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'COMMAND)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'COMMAND)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "bjk_lang.fsy"
                                                                                Core.Choice(_3,_7)
                   )
# 35 "bjk_lang.fsy"
                 : 'COMMAND));
# 270 "bjk_lang.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'COMMAND)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'COMMAND)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "bjk_lang.fsy"
                                                                                  Core.Choice(_3,_7)
                   )
# 36 "bjk_lang.fsy"
                 : 'COMMAND));
# 282 "bjk_lang.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "bjk_lang.fsy"
                                           Core.Var(_1)
                   )
# 37 "bjk_lang.fsy"
                 : 'EXP));
# 293 "bjk_lang.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'EXP)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'EXP)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "bjk_lang.fsy"
                                                Core.Plus(_1,_3)
                   )
# 38 "bjk_lang.fsy"
                 : 'EXP));
# 305 "bjk_lang.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'EXP)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'EXP)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "bjk_lang.fsy"
                                                Core.Times(_1,_3)
                   )
# 39 "bjk_lang.fsy"
                 : 'EXP));
# 317 "bjk_lang.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "bjk_lang.fsy"
                                   Int _1 
                   )
# 40 "bjk_lang.fsy"
                 : 'EXP));
|]
# 329 "bjk_lang.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 21;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let PROG lexer lexbuf : Core.Cmd =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
